1. 구조설명
  CREATE OR REPLACE PROCEDURE procedure_name 
   [(argument...)] 
  AS
    [변수 선언 부분]
  BEGIN
   [PL/SQL Block]  -- PL/SQL 블록에는 적어도 한 개의 RETURN 문이 있어야 합니다. 
           -- PL/SQL Block은 함수가 수행할 내용을 정의한 몸체부분입니다.
  END;

2. 기본구조
  CREATE OR REPLACE PROCEDURE ASS_STAND_CD_INSERT
  IS
  BEGIN
  -- 자산표준화코드
  DELETE TB_OOO;

  INSERT INTO TB_OOO (STAND_CD, STAND_CD_NM)
  SELECT DISTINCT CLASS_CODE, CLASS_NAME FROM ASSET_CLASS_T;

  COMMIT;
  END ASS_STAND_CD_INSERT;
  /

3. EXCEPTION & RETURN
  CREATE OR REPLACE PROCEDURE LENDING_AND_RETURN_PROC
  ( V_LENDINGER_EMP_NO         VARCHAR2,
   V_BARCODE                  VARCHAR2,
   V_STATUS                   OUT NUMBER,   -- -1.ERROR, 0.GOOD, 1.사번입력
   V_MESSAGE                  OUT VARCHAR2) -- MESSAGE
  AS
  B_NEXT_SEQ_NO       NUMBER;
  BEGIN
   B_RTN_EXPECT_YMD := TO_CHAR(ADD_MONTHS(SYSDATE,1),'YYYYMMDD');
   B_YMD            := TO_CHAR(SYSDATE     ,'YYYYMMDD');

   BEGIN
    SELECT 'B' INTO B_GUBUN FROM TB_POR_BOOK WHERE BOOK_SNO = V_BARCODE;
   EXCEPTION WHEN NO_DATA_FOUND THEN
    BEGIN
     SELECT 'J' INTO B_GUBUN FROM  TB_POR_VOLUME_NO WHERE VOLUME_NO_SNO = V_BARCODE;
    EXCEPTION WHEN NO_DATA_FOUND THEN
     V_STATUS  := -1;
     V_MESSAGE := 'BOOK 기준 정보가 없습니다!';
     RETURN;
    END;       
   END; 
  END;

4_1. CURSOR
  CREATE OR REPLACE procedure MANINSEMP IS

  e_app_err       EXCEPTION;
  v_sno           NUMBER(5)    := 0;
  v_msg           varchar2(100);
  v_belt          varchar2(5);
  v_final         varchar2(5);
  V_FROM_YM        VARCHAR2(8);
  V_END_YM        VARCHAR2(8);
  /*-----------------------------------------------
  가족사항 커서 
  -------------------------------------------------*/
  CURSOR CUR_FAMILY IS 
    SELECT A.SABUN             --사번
      , A.RELATIONSHIP      --가족구분
      , FAMILY_NAME       --가족이름
      , CASE SUBSTR(RESIDENT_NO,8,1) WHEN '1' THEN '19'|| SUBSTR(RESIDENT_NO,0,6)
                     WHEN '2' THEN '19'|| SUBSTR(RESIDENT_NO,0,6)
                     WHEN '3' THEN '20'|| SUBSTR(RESIDENT_NO,0,6)
                     WHEN '4' THEN '20'|| SUBSTR(RESIDENT_NO,0,6)
                     ELSE ''
       END BIRTH_YMD --생년월일
      , CONTACT_RELATIONSHIP_ID
   FROM   TB_LGEIF_FAMILY A, TB_MAN_EMP C
      , (SELECT SABUN, RELATIONSHIP,MAX(LAST_UPDATE_DATE) LAST_UPDATE_DATE
       FROM TB_lgeif_family
       GROUP BY SABUN, RELATIONSHIP) B
   WHERE   A.SABUN = B.SABUN
   AND     A.SABUN = C.EMP_NO
   AND     A.RELATIONSHIP = B.RELATIONSHIP
   AND     A.LAST_UPDATE_DATE = B.LAST_UPDATE_DATE
   ORDER BY SABUN, RELATIONSHIP;

   BEGIN
    DELETE FROM TB_MAN_FAM;

    FOR REC_FAMILY IN CUR_FAMILY LOOP 
     BEGIN
    
      SELECT  NVL(MAX(SNO),0) + 1 INTO v_sno FROM TB_MAN_FAM WHERE EMP_NO = REC_FAMILY.SABUN;
      IF v_sno IS NULL THEN
        v_sno := 1;
      END IF;

      INSERT INTO TB_MAN_FAM (EMP_NO, SNO, FAM_FG, FAM_NM, BIRTH_YMD, CONTACT_RELATIONSHIP_ID)
      VALUES (REC_FAMILY.SABUN, v_sno, REC_FAMILY.RELATIONSHIP, REC_FAMILY.FAMILY_NAME, REC_FAMILY.BIRTH_YMD, REC_FAMILY.CONTACT_RELATIONSHIP_ID);
     
      EXCEPTION
        WHEN OTHERS THEN
          v_msg  := 'TB_MAN_FAM INSERT ERROR!(' || REC_FAMILY.SABUN || ',' || v_sno || ')' || SQLERRM; 
          raise e_app_err;
     END;
        
    END LOOP;
   END;
COMMIT;
END MANINSEMP;

4_2. CURSOR
  CREATE OR REPLACE procedure MstSchoolIns is
  e_app_err       EXCEPTION;
  /*-----------------------------------------------
  학교 커서 
  -------------------------------------------------*/
  CURSOR CUR_SCHOOLCODE IS 
   SELECT DISTINCT
       A.SCHOOL_CODE          --학교코드
      , CODE_NAME LOCATION
      , CASE WHEN A.SCHOOL_NAME LIKE 'KAIST%' THEN '2'
         WHEN A.SCHOOL_NAME LIKE 'LG%' THEN '2'
         ELSE SUBSTR(DUMP(SUBSTR(A.SCHOOL_NAME, 1, 1)), INSTR(DUMP(SUBSTR(A.SCHOOL_NAME, 1, 1)), 'Len=') + 4, 1) 
       END FRN_YN
   FROM   LGEIF_SCHOOL A, LGEIF_CODE1 C
      , (SELECT SABUN, SCHOOL_CODE, MAX(LAST_UPDATE_DATE) LAST_UPDATE_DATE FROM LGEIF_SCHOOL GROUP BY SABUN, SCHOOL_CODE) B
   WHERE  A.SABUN = B.SABUN
   AND    A.SCHOOL_CODE = B.SCHOOL_CODE
   AND    C.CODE = A.LOCATION
   AND    C.LAST_UPDATE_DATE = (SELECT MAX(LAST_UPDATE_DATE) LAST_UPDATE_DATE FROM LGEIF_CODE1 WHERE CODE_TYPE='LGE_HR_SCHOOLLOCATION_LU' and CODE = A.LOCATION)
   AND    A.LAST_UPDATE_DATE = B.LAST_UPDATE_DATE;
   
  BEGIN
   FOR REC_SCHOOLCODE IN CUR_SCHOOLCODE LOOP 
    BEGIN
     UPDATE TB_MST_SCHOOL
     SET SITE_NM = REC_SCHOOLCODE.LOCATION
     ,   FRN_YN  = DECODE(REC_SCHOOLCODE.FRN_YN, '1','Y','N')
     WHERE  SCHOOL_CD = REC_SCHOOLCODE.SCHOOL_CODE;
    
     EXCEPTION
       WHEN OTHERS THEN
         raise e_app_err;
    END;
       
   END LOOP;
  END;

  COMMIT;
  end MstSchoolIns;
  /

4_3. CURSOR & FETCH
  CREATE OR REPLACE PROCEDURE SP_BP_WORK
  (
    v_rtncd     in out  NUMBER,                         --  return 값
    v_msg       in out  VARCHAR2,                       --  return message
    v_num       in out  NUMBER,                         --  수행 job no
    v_BP_YY     in      TB_BGT_BP_DGR.BP_YY%TYPE,       --  사업계획 년도
    v_CENTER_CD in      TB_BGT_BP_DGR.CENTER_CD%TYPE,   --  원/센터 코드
    v_PLAN_FG   in      TB_BGT_BP_DGR.PLAN_FG%TYPE,     --  계획 구분
    v_DGR       in      TB_BGT_BP_DGR.DGR%TYPE          --  차수
  )
  IS
  --#############################################################################
  -- 함 수 명 : SP_BP_WORK
  -- 설    명 : 사업계획 관리 PROCEDURE
  -- 작 성 자 : leekiju
  -- 작 성 일 : 2005-06-18
  --#############################################################################
  --   v_ST1              TRO_COM_HIS.STATUS%TYPE;
    e_app_err          EXCEPTION;
    e_app_chk          EXCEPTION;
    e_app_end          EXCEPTION;

    v_TableName        VARCHAR2(50);
    v_max_DGR          NUMBER;
    v_Count            NUMBER;
    v_EMP_NO           TB_MAN_EMP.EMP_NO%TYPE;
    v_ORG_CD           TB_MAN_EMP.ORG_CD%TYPE;
    v_ENT_APPOINT_EMP_CD TB_MAN_ENT_APPOINT_EMP.ENT_APPOINT_EMP_CD%TYPE;
    v_FcManGetCenterCd TB_MAN_ORG.UP_ORG_CD%TYPE;

    CURSOR CUR_TbManEmp IS
     select EMP_NO, ORG_CD
      from TB_MAN_EMP;

    CURSOR CUR_TbManEntAppointEmp IS
     select ENT_APPOINT_EMP_CD, ORG_CD
      from TB_MAN_ENT_APPOINT_EMP;

  BEGIN

    DBMS_OUTPUT.ENABLE(2000000);

    OPEN CUR_TbManEmp;
    LOOP
      FETCH CUR_TbManEmp INTO v_EMP_NO, v_ORG_CD;

      IF CUR_TbManEmp%NOTFOUND THEN
       CLOSE CUR_TbManEmp;
       EXIT;
      ELSE
       select FC_MAN_GETCENTERCD(v_ORG_CD) into v_FcManGetCenterCd from dual;

       IF v_CENTER_CD = v_FcManGetCenterCd THEN
         INSERT INTO TB_BGT_BP_EMP (BP_YY, CENTER_CD, PLAN_FG, DGR, EMP_NO,
                       EMP_NM, ORG_CD, POSITION_FG, RANK_FG, RANK_Y_CNT,
                       DOCTOR_FG, MAJ_CD, DUTY_FG, ENT_YMD, RETIRE_YMD,
                       WRITE_AUTH_FG, IN_OFFI_STAT_FG, CALLED_Y_CNT, NEW_EMP_YN, OPEN_YMD)
         SELECT v_BP_YY BP_YY, v_CENTER_CD CENTER_CD, v_PLAN_FG PLAN_FG, v_DGR DGR, X.EMP_NO,
             X.KO_NM, X.ORG_CD, X.POSITION_FG, Z.UP_COMM_CD, X.RANK_Y_CNT,
             Y.DOCTOR_FG, Y.MAJ_CD, X.DUTY_FG, X.ENT_YMD, nvl(X.RETIRE_YMD, '99991231'),
             null, X.IN_OFFI_STAT_FG, X.CALLED_Y_CNT, 'N', null
          FROM TB_MAN_EMP  X
            , TB_MAN_SCHOLAR  Y
            , TB_MST_COMM_CD  Z
          WHERE X.EMP_NO = v_EMP_NO
           AND X.IN_OFFI_STAT_FG IN ('C','I')
           AND X.EMP_NO = Y.EMP_NO(+)
           AND 'Y' = Y.FINAL_YN(+)
           AND X.RANK_FG = Z.COMM_CD(+)
           AND 'MAN10' = Z.CAT_CD(+)
         ;
       END IF;
      END IF;
    END LOOP;

    -- 입사예정자
    OPEN CUR_TbManEntAppointEmp;
    LOOP
      FETCH CUR_TbManEntAppointEmp INTO v_ENT_APPOINT_EMP_CD, v_ORG_CD;

      IF CUR_TbManEntAppointEmp%NOTFOUND THEN
       CLOSE CUR_TbManEntAppointEmp;
       EXIT;
      ELSE
       select FC_MAN_GETCENTERCD(v_ORG_CD) into v_FcManGetCenterCd from dual;

       IF v_CENTER_CD = v_FcManGetCenterCd THEN
         INSERT INTO TB_BGT_BP_EMP (BP_YY, CENTER_CD, PLAN_FG, DGR, EMP_NO,
                       EMP_NM, ORG_CD, POSITION_FG, RANK_FG, RANK_Y_CNT,
                       DOCTOR_FG, MAJ_CD, DUTY_FG, ENT_YMD, RETIRE_YMD,
                       WRITE_AUTH_FG, IN_OFFI_STAT_FG, CALLED_Y_CNT, NEW_EMP_YN, OPEN_YMD)
         SELECT v_BP_YY BP_YY, v_CENTER_CD CENTER_CD, v_PLAN_FG PLAN_FG, v_DGR DGR, X.ENT_APPOINT_EMP_CD,
             X.KO_NM, X.ORG_CD, X.POSITION_FG, Z.UP_COMM_CD, X.RANK_Y_CNT,
             Y.DOCTOR_FG, Y.MAJ_CD, X.DUTY_FG, X.ENT_YMD, '99991231',
             null, 'R', null, 'Y', null
          FROM TB_MAN_ENT_APPOINT_EMP  X
            , TB_MAN_SCHOLAR  Y
            , TB_MST_COMM_CD  Z
          WHERE X.ENT_APPOINT_EMP_CD = v_ENT_APPOINT_EMP_CD
           AND substr(X.ENT_YMD, 1, 4) = v_BP_YY
           AND X.ENT_APPOINT_EMP_CD = Y.EMP_NO(+)
           AND 'Y' = Y.FINAL_YN(+)
           AND X.RANK_FG = Z.COMM_CD(+)
           AND 'MAN10' = Z.CAT_CD(+)
         ;
       END IF;
      END IF;
    END LOOP;

    v_msg   := RPAD('SP_BP_WORK',20,' ') || '[성공]';
    v_rtncd := 1;
    COMMIT;

  EXCEPTION
    WHEN e_app_end THEN
      v_msg   := '[확인]' || ' [' || v_msg || ']';
      v_rtncd := 99;
      ROLLBACK;
    WHEN e_app_chk THEN
      v_msg   := RPAD('SP_BP_WORK',20,' ') || '[확인]' || ' [' || v_TableName || ', ' || v_max_DGR || '차' || ' 입니다.]';
      v_rtncd := -3;
      ROLLBACK;
    WHEN e_app_err THEN
      v_msg   := RPAD('SP_BP_WORK',20,' ') || '[실패]' || ' [' || SQLERRM || ', ' || v_TableName || ', ' || v_max_DGR || '차' || ']';
      v_rtncd := -2;
      ROLLBACK;
    WHEN OTHERS THEN
      v_msg   := RPAD('SP_BP_WORK',20,' ') || '[실패]' || ' [' || SQLERRM || ', ' || v_TableName || ', ' || v_max_DGR || '차' || ']';
      v_rtncd := -1;
      ROLLBACK;
  END SP_BP_WORK;
  /


5. IF
  CREATE OR REPLACE PROCEDURE SP_BGT_COMM_COST_SET
  (
    v_rtncd         IN OUT  NUMBER,                 /*  return 값                    */
    v_msg           IN OUT  VARCHAR2,               /*  return massage               */
    v_plan_fg       IN      VARCHAR2,               /*  계획구분                     */
    v_dgr           IN      NUMBER,                 /*  차수                         */
    v_bp_yy         IN      VARCHAR2,               /*  계획년도                     */
    v_center_cd     IN      VARCHAR2,               /*  원/센터코드                  */
    v_work_gubun    IN      VARCHAR2                /*  작업구분(Y:확인유, N:확인무) */
  )
  IS
  /* ============================================================================
    함 수 명 : SP_BGT_COMM_COST_SET
    설    명 : (사업계획) 그룹별 공통비 집계 적용 PROCEDURE
    작 성 자 : jhkim
    작 성 일 : 2005-07-07
  ============================================================================ */
    e_app_err       EXCEPTION;
    e_app_end       EXCEPTION;
    TS_ERR          VARCHAR2(3)                 := 'E00';
    v_close_yn      TB_BGT_BP_DGR.CLOSE_YN%TYPE := 'N';         /* 배부마감 여부  */
    v_work_cnt      NUMBER(10)                  := 0;           /* 배부건수       */
    v_cnt           NUMBER(10)                  := 0;
    v_up_rate       NUMBER(10)                  := 0;
    /* ==========================================================================
      각 그룹별 총 MM을 산출한다.
    ========================================================================== */
    CURSOR cur_org_mm IS
      SELECT A.ORG_CD                             /* 조직코드        */
         ,SUM(A.M1_MM)  + SUM(A.M2_MM)  +
         SUM(A.M3_MM)  + SUM(A.M4_MM)  +
         SUM(A.M5_MM)  + SUM(A.M6_MM)  +
         SUM(A.M7_MM)  + SUM(A.M8_MM)  +
         SUM(A.M9_MM)  + SUM(A.M10_MM) +
         SUM(A.M11_MM) + SUM(A.M12_MM)     TOT_MM
      FROM   TB_BGT_BP_MST         C              /* 사업계획마스터       */
         ,TB_BGT_BP_ORG         B              /* 사업계획조직         */
         ,TB_BGT_BP_EMP_MM_PLAN A              /* 사업계획사원별MM계획 */
      WHERE  A.PLAN_FG       = B.PLAN_FG
      AND    A.DGR           = B.DGR
      AND    A.ORG_CD        = B.ORG_CD
      AND    A.PLAN_FG       = C.PLAN_FG
      AND    A.DGR           = C.DGR
      AND    A.BP_PJT_CD     = C.BP_PJT_CD
      AND    A.BP_PRD_YY     = C.BP_YY
      AND    B.BP_YY         = v_bp_yy
      AND    B.CENTER_CD     = v_center_cd
      AND    B.PLAN_FG       = v_plan_fg
      AND    B.DGR           = v_dgr
      AND    B.RSCH_GR_YN    = 'Y'
      AND    C.IDEA_CNVT_YN  = 'N'
      AND    C.MNG_GR_BP_FG  IN ('2', '3')
      GROUP BY A.ORG_CD;
  BEGIN
    DBMS_OUTPUT.ENABLE(2000000);
  TS_ERR := 'E01';
    IF v_work_gubun != 'Y' AND v_work_gubun != 'N' THEN
      v_msg   := '작업구분 오류!!';
      v_rtncd := -1;
      raise e_app_end;
    END IF;
  TS_ERR := 'E02';
    /* 사업계획차수 마감여부 확인 */
    BEGIN
      SELECT A.CLOSE_YN                         /* 배부마감 여부 */
      INTO   v_close_yn
      FROM   TB_BGT_BP_DGR A                    /* 사업계획차수  */
      WHERE  A.BP_YY     = v_bp_yy
      AND    A.CENTER_CD = v_center_cd
      AND    A.PLAN_FG   = v_plan_fg
      AND    A.DGR       = v_dgr ;
    EXCEPTION
      WHEN OTHERS THEN
        raise e_app_err;
    END;
    IF v_close_yn = 'Y' THEN
      v_msg   := '배부마감되었습니다!!';
      v_rtncd := 101;
      raise e_app_end;
    END IF;
  TS_ERR := 'E03';
    /* 1차 배부 여부 확인 */
    BEGIN
      SELECT COUNT(*)                          /* 배부마감 여부  */
      INTO   v_work_cnt
      FROM   TB_BGT_IND_COST_RSLT A            /* 간접비배부결과 */
         ,( SELECT B.PLAN_FG
             ,B.DGR
             ,B.BP_PJT_CD
          FROM   TB_BGT_BP_MST B          /* 사업계획마스터 */
          WHERE  B.PLAN_FG   = v_plan_fg
          AND    B.DGR       = v_dgr
          AND    B.BP_YY     = v_bp_yy
          AND    B.CENTER_CD = v_center_cd ) C
      WHERE  A.PLAN_FG   = C.PLAN_FG
      AND    A.DGR       = C.DGR
      AND    A.BP_PJT_CD = C.BP_PJT_CD
      AND    A.DIST_DGR  = 1 ;
    EXCEPTION
      WHEN OTHERS THEN
        raise e_app_err;
    END;
    IF v_work_cnt = 0 THEN
      v_msg   := '배부결과자료가없습니다!!';
      v_rtncd := 102;
      raise e_app_end;
    END IF;
  TS_ERR := 'E04';
    /* 기존 집계된 정보 삭제 */
    BEGIN
      DELETE TB_BGT_BP_COMM_COST A                     /* 그룹공통비집계 */
      WHERE  A.ORG_CD IN ( SELECT B.ORG_CD
                FROM   TB_BGT_BP_ORG B      /* 사업계획조직   */
                WHERE  B.BP_YY      = v_bp_yy
                AND    B.CENTER_CD  = v_center_cd
                AND    B.PLAN_FG    = v_plan_fg
                AND    B.DGR        = v_dgr
                AND    B.RSCH_GR_YN = 'Y' )
      AND    A.BP_YY  = v_bp_yy ;
    EXCEPTION
      WHEN OTHERS THEN
        raise e_app_err;
    END;
  TS_ERR := 'E05';
    /* 2차 배부 여부 확인 */
    BEGIN
      SELECT COUNT(*)                         /* 배부마감 여부  */
      INTO   v_work_cnt
      FROM   TB_BGT_IND_COST_RSLT A           /* 간접비배부결과 */
         ,( SELECT B.PLAN_FG
             ,B.DGR
             ,B.BP_PJT_CD
          FROM   TB_BGT_BP_MST B         /* 사업계획마스터 */
          WHERE  B.PLAN_FG   = v_plan_fg
          AND    B.DGR       = v_dgr
          AND    B.BP_YY     = v_bp_yy
          AND    B.CENTER_CD = v_center_cd ) C
      WHERE  A.PLAN_FG   = C.PLAN_FG
      AND    A.DGR       = C.DGR
      AND    A.BP_PJT_CD = C.BP_PJT_CD
      AND    A.DIST_DGR  = 2 ;
    EXCEPTION
      WHEN OTHERS THEN
        raise e_app_err;
    END;
    /* 2차배부 전 그룹별 공통비 집계 */
    IF v_work_cnt = 0 THEN
  TS_ERR := 'E06';
      BEGIN
       INSERT INTO TB_BGT_BP_COMM_COST     /* 그룹공통비집계 */
       SELECT A.ORG_CD
          ,B.BP_YY
          ,C.UP_ACCT_CD
          ,SUM( DECODE( DIST_DGR, 1, A.M1_AMT , 0, -A.M1_AMT )
            + DECODE( DIST_DGR, 1, A.M2_AMT , 0, -A.M2_AMT )
            + DECODE( DIST_DGR, 1, A.M3_AMT , 0, -A.M3_AMT )
            + DECODE( DIST_DGR, 1, A.M4_AMT , 0, -A.M4_AMT )
            + DECODE( DIST_DGR, 1, A.M5_AMT , 0, -A.M5_AMT )
            + DECODE( DIST_DGR, 1, A.M6_AMT , 0, -A.M6_AMT )
            + DECODE( DIST_DGR, 1, A.M7_AMT , 0, -A.M7_AMT )
            + DECODE( DIST_DGR, 1, A.M8_AMT , 0, -A.M8_AMT )
            + DECODE( DIST_DGR, 1, A.M9_AMT , 0, -A.M9_AMT )
            + DECODE( DIST_DGR, 1, A.M10_AMT, 0, -A.M10_AMT)
            + DECODE( DIST_DGR, 1, A.M11_AMT, 0, -A.M11_AMT)
            + DECODE( DIST_DGR, 1, A.M12_AMT, 0, -A.M12_AMT) )
       FROM   TB_BGT_IND_COST_RSLT A          /* 간접비배부결과 */
          ,TB_BGT_BP_ORG        B          /* 사업계획조직   */
          ,TB_MST_ACCT_CD       C          /* 계정코드       */
       WHERE  A.PLAN_FG    = B.PLAN_FG
       AND    A.DGR        = B.DGR
       AND    A.ORG_CD     = B.ORG_CD
       AND    B.BP_YY      = v_bp_yy
       AND    B.CENTER_CD  = v_center_cd
       AND    B.PLAN_FG    = v_plan_fg
       AND    B.DGR        = v_dgr
       AND    B.RSCH_GR_YN = 'Y'
       AND    A.ACCT_CD    = C.ACCT_CD
       AND    A.DIST_DGR   IN (0, 1)
       GROUP BY A.ORG_CD, B.BP_YY, C.UP_ACCT_CD ;
      EXCEPTION
       WHEN OTHERS THEN
          raise e_app_err;
      END;
    /* 2차배부 후 그룹별 공통비 집계 */
    ELSE
  TS_ERR := 'E07';
      BEGIN
       INSERT INTO TB_BGT_BP_COMM_COST     /* 그룹공통비집계 */
       SELECT A.ORG_CD
          ,B.BP_YY
          ,C.UP_ACCT_CD
          ,SUM( DECODE( DIST_DGR, 2, A.M1_AMT , 0, -A.M1_AMT )
            + DECODE( DIST_DGR, 2, A.M2_AMT , 0, -A.M2_AMT )
            + DECODE( DIST_DGR, 2, A.M3_AMT , 0, -A.M3_AMT )
            + DECODE( DIST_DGR, 2, A.M4_AMT , 0, -A.M4_AMT )
            + DECODE( DIST_DGR, 2, A.M5_AMT , 0, -A.M5_AMT )
            + DECODE( DIST_DGR, 2, A.M6_AMT , 0, -A.M6_AMT )
            + DECODE( DIST_DGR, 2, A.M7_AMT , 0, -A.M7_AMT )
            + DECODE( DIST_DGR, 2, A.M8_AMT , 0, -A.M8_AMT )
            + DECODE( DIST_DGR, 2, A.M9_AMT , 0, -A.M9_AMT )
            + DECODE( DIST_DGR, 2, A.M10_AMT, 0, -A.M10_AMT)
            + DECODE( DIST_DGR, 2, A.M11_AMT, 0, -A.M11_AMT)
            + DECODE( DIST_DGR, 2, A.M12_AMT, 0, -A.M12_AMT) )
       FROM   TB_BGT_IND_COST_RSLT A          /* 간접비배부결과 */
          ,TB_BGT_BP_ORG        B          /* 사업계획조직   */
          ,TB_MST_ACCT_CD       C          /* 계정코드       */
       WHERE  A.PLAN_FG    = B.PLAN_FG
       AND    A.DGR        = B.DGR
       AND    A.ORG_CD     = B.ORG_CD
       AND    B.BP_YY      = v_bp_yy
       AND    B.CENTER_CD  = v_center_cd
       AND    B.PLAN_FG    = v_plan_fg
       AND    B.DGR        = v_dgr
       AND    B.RSCH_GR_YN = 'Y'
       AND    A.ACCT_CD    = C.ACCT_CD
       AND    A.DIST_DGR   IN (0, 2)
       GROUP BY A.ORG_CD, B.BP_YY, C.UP_ACCT_CD ;
      EXCEPTION
       WHEN OTHERS THEN
          raise e_app_err;
      END;
    END IF;
    FOR R1 IN cur_org_mm LOOP
  TS_ERR := 'E08';
      BEGIN
        UPDATE TB_BGT_BP_COMM_COST A
        SET    A.AMT = ROUND(A.AMT / R1.TOT_MM, 0)
        WHERE  A.ORG_CD = R1.ORG_CD
        AND    A.BP_YY  = v_bp_yy;
      EXCEPTION
        WHEN OTHERS THEN
          raise e_app_err;
      END;
    END LOOP;
  TS_ERR := 'E09';
    /* 간접비인상율을 가져온다. */
    BEGIN
      SELECT TO_NUMBER(A.DESCR, '9999999')
      INTO   v_up_rate
      FROM   TB_MST_COMM_CAT_CD A          /* 공통분류코드 */
      WHERE  A.CAT_CD = 'BGT70';           /* 분류코드 => 간접비인상율(BGT70) */
      IF SQL%NOTFOUND THEN
       v_up_rate := 100;
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        raise e_app_err;
    END;
    /* 5년치의 집계정보를 입력함 (계정년도 ~ +4년까지 ) */
    FOR v_cnt IN 1..4 LOOP
  TS_ERR := 'E10';
      /* 기존 집계된 정보 삭제 */
      BEGIN
        DELETE TB_BGT_BP_COMM_COST A                     /* 그룹공통비집계 */
        WHERE  A.ORG_CD IN ( SELECT B.ORG_CD
                  FROM   TB_BGT_BP_ORG B      /* 사업계획조직   */
                  WHERE  B.BP_YY      = v_bp_yy
                  AND    B.CENTER_CD  = v_center_cd
                  AND    B.PLAN_FG    = v_plan_fg
                  AND    B.DGR        = v_dgr
                  AND    B.RSCH_GR_YN = 'Y' )
        AND    A.BP_YY  = TRIM(TO_CHAR(TO_NUMBER(v_bp_yy, '9999') + v_cnt)) ;
      EXCEPTION
        WHEN OTHERS THEN
          raise e_app_err;
      END;
  TS_ERR := 'E11';
      /* 그룹별 공통비 집계 */
      BEGIN
        INSERT INTO TB_BGT_BP_COMM_COST                 /* 그룹공통비집계 */
        SELECT A.ORG_CD
           ,A.BP_YY + 1
           ,A.ACCT_CD
           ,A.AMT * v_up_rate /100
        FROM   TB_BGT_BP_COMM_COST A                    /* 그룹공통비집계 */
           ,TB_BGT_BP_ORG       B                    /* 사업계획조직   */
        WHERE  A.ORG_CD     = B.ORG_CD
        AND    A.BP_YY      = TRIM(TO_CHAR(TO_NUMBER(v_bp_yy, '9999') + v_cnt - 1))
        AND    B.BP_YY      = v_bp_yy
        AND    B.CENTER_CD  = v_center_cd
        AND    B.PLAN_FG    = v_plan_fg
        AND    B.DGR        = v_dgr
        AND    B.RSCH_GR_YN = 'Y' ;
      EXCEPTION
        WHEN OTHERS THEN
          raise e_app_err;
      END;
    END LOOP;
    COMMIT;
    v_msg   := '[성공] SP_BGT_COMM_COST_SET SUCCESS';
    v_rtncd := 0;
  EXCEPTION
    WHEN e_app_end THEN
      v_msg   := TS_ERR || '[확인]' || ' [' || v_msg || ']';
      ROLLBACK;
    WHEN e_app_err THEN
      v_msg   := TS_ERR || '[실패] SP_BGT_COMM_COST_SET1' || ' [' || SQLERRM || ']';
      v_rtncd := -2;
      ROLLBACK;
    WHEN OTHERS THEN
      v_msg   := TS_ERR || '[실패] SP_BGT_COMM_COST_SET2' || ' [' || SQLERRM || ']';
      v_rtncd := -1;
      ROLLBACK;
  END SP_BGT_COMM_COST_SET ;
  /

6. PL/SQL
  CREATE OR REPLACE PROCEDURE SP_OSC_COST_MAIL IS
  --#############################################################################
  -- 함 수 명 : SP_OSC_ORG_IMP
  -- 설    명 : 이달에 비용지급 예정인 용역리스트 메일링 
  -- 작 성 자 : HEEJEONG JO
  -- 작 성 일 : 2005-10-28
  --#############################################################################
   
   V_PJT_NM     TB_PJT_MST.PJT_NM%TYPE;               
   V_PJT_CD     TB_OSC_COST.PJT_CD%TYPE;
   V_ORG_CD     TB_OSC_COST.ORG_CD%TYPE;
   
   V_YMD      VARCHAR2(100);
    
   V_MID                     NUMBER;
   V_TITLE     VARCHAR2(100);
   V_BODY     VARCHAR2(4000); 
   V_BODY1     VARCHAR2(4000);    
   
   E_APP_ERR                 EXCEPTION;
   V_MSG                     VARCHAR2(2000);

   -- 이달의 비용지급 대상 용역 추출
   CURSOR CUR_OSCCOST IS
   SELECT AA.PJT_CD
      , AA.ORG_CD
     , FC_PJT_GETPJTNM(AA.PJT_CD) PJT_NM
   FROM TB_OSC_COST AA
     , (SELECT A.PJT_CD
        , A.ORG_CD 
      FROM TB_OSC_MST A
       , (SELECT CONS_CD
          FROM TB_MST_CONS
        WHERE PROG_STAT_FG = '99') B
      WHERE A.MAIN_CONS_CD = B.CONS_CD) BB
    WHERE AA.PJT_CD = BB.PJT_CD
    AND AA.ORG_CD = BB.ORG_CD
    GROUP BY AA.PJT_CD, AA.ORG_CD;

  BEGIN
   
   OPEN CUR_OSCCOST;
   LOOP
    FETCH CUR_OSCCOST INTO V_PJT_CD, V_ORG_CD, V_PJT_NM;
     
    IF CUR_OSCCOST%NOTFOUND THEN
        CLOSE CUR_OSCCOST;
        EXIT;
      ELSE
    
 V_BODY  := '';
 V_BODY1 := '';
 V_TITLE := '';
 
 V_TITLE := TO_CHAR(SYSDATE, 'YYYY')||'년 '||TO_CHAR(SYSDATE, 'MM')||'월 비용지급 계획 리스트';
     
 V_BODY := V_BODY || '<html>';
 V_BODY := V_BODY || '<head>';
 V_BODY := V_BODY || '<meta http-equiv="Content-Type" content="text/html; charset=euc-kr">';
 V_BODY := V_BODY || '<style>';
 V_BODY := V_BODY || '.table_header_center ';
 V_BODY := V_BODY || '{';
 V_BODY := V_BODY || 'FONT-SIZE: 11px; ';
 V_BODY := V_BODY || 'FONT-FAMILY: "Arial", "굴림"; ';
 V_BODY := V_BODY || 'HEIGHT: 22px; ';
 V_BODY := V_BODY || 'BACKGROUND-COLOR: #e7eff3; ';
 V_BODY := V_BODY || 'TEXT-ALIGN: center ';
 V_BODY := V_BODY || '} ';
 V_BODY := V_BODY || '.table_bg_white ';
 V_BODY := V_BODY || '{ ';
 V_BODY := V_BODY || 'FONT-SIZE: 11px; ';
 V_BODY := V_BODY || 'FONT-FAMILY: "Arial", "굴림"; ';
 V_BODY := V_BODY || 'HEIGHT: 22px; ';
 V_BODY := V_BODY || 'BACKGROUND-COLOR: #ffffff ';
 V_BODY := V_BODY || '} ';
 V_BODY := V_BODY || '.table_blue_bg1 ';
 V_BODY := V_BODY || '{ ';
 V_BODY := V_BODY || 'FONT-SIZE: 11px; ';
 V_BODY := V_BODY || 'COLOR: #666666; ';
 V_BODY := V_BODY || 'FONT-FAMILY: "Arial", "돋움"; ';
 V_BODY := V_BODY || 'HEIGHT: 23px; ';
 V_BODY := V_BODY || 'BACKGROUND-COLOR: #f5f8fa ';
 V_BODY := V_BODY || '} ';
 V_BODY := V_BODY || '</style>';
 V_BODY := V_BODY || '</head>';
 V_BODY := V_BODY || '<body>';
 V_BODY := V_BODY || '<table width="80%" border="0" cellspacing="0" cellpadding="0">';
 V_BODY := V_BODY || '<tr>';
 V_BODY := V_BODY || '<td class="table_bg_white">&nbsp;▶&nbsp;'||TO_CHAR(SYSDATE,'YYYY-MM')||' 비용지급 계획 리스트';
 V_BODY := V_BODY || '</td>';
 V_BODY := V_BODY || '</tr>';
 V_BODY := V_BODY || '<tr>';
 V_BODY := V_BODY || '<td class="table_blue_bg">';
 V_BODY := V_BODY || '<table width="100%" border="1" cellspacing="1" cellpadding="2" class="table_bg">';
 V_BODY := V_BODY || '<tr>';   
 V_BODY := V_BODY || '<td class="table_header_center" width="15%">프로젝트명</td>';
 V_BODY := V_BODY || '<td class="table_bg_white" colspan="3">&nbsp;'||V_PJT_NM||'</td>';
 V_BODY := V_BODY || '</tr>';
 V_BODY := V_BODY || '</table>';   
 V_BODY := V_BODY || '</td>';
 V_BODY := V_BODY || '</tr>';
 V_BODY := V_BODY || '<tr>';       
 V_BODY := V_BODY || '<table width="80%" border="1" cellspacing="1" cellpadding="2" class="table_bg">';   
 V_BODY := V_BODY || '<tr>';                 
 V_BODY := V_BODY || '<td class="table_header_center" width="60%">용역명</td>';
 V_BODY := V_BODY || '<td class="table_header_center" width="10%">차수</td>';
 V_BODY := V_BODY || '<td class="table_header_center" width="15%">비용지급일자</td>';
 V_BODY := V_BODY || '<td class="table_header_center" width="15%">금액</td>';
 V_BODY := V_BODY || '</tr>';
 
     FOR COSTLIST IN 
     (
      SELECT A.COST_DGR
        , A.COST_YMD
        , TO_CHAR(A.COST_AMT,'999,999,999,999') COST_AMT
        , B.SUBJ_NM   
       FROM TB_OSC_COST A
        , TB_OSC_MST B
       WHERE SUBSTR(A.COST_YMD,0,6) = TO_CHAR(SYSDATE,'YYYYMM')
        AND A.PJT_CD = B.PJT_CD
       AND A.ORG_CD = B.ORG_CD
       AND A.SNO    = B.SNO
       AND A.PJT_CD = V_PJT_CD
       AND A.ORG_CD = V_ORG_CD
     ) 
     LOOP
     
      V_YMD      := '';

       -- 시작일자 포멧 셋팅
      V_YMD := SUBSTR(COSTLIST.COST_YMD,0,4)||'-'||SUBSTR(COSTLIST.COST_YMD,5,2);
      
      IF LENGTH(TRIM(COSTLIST.COST_YMD)) = 8 THEN
      
        V_YMD := V_YMD ||'-'|| SUBSTR(COSTLIST.COST_YMD,7,2);    
         
      END IF; 
      
      V_BODY1 := V_BODY1 || '<tr>'; 
      V_BODY1 := V_BODY1 || '<td class=table_bg_white>&nbsp;'||COSTLIST.SUBJ_NM||'</td>';    
      V_BODY1 := V_BODY1 || '<td class=table_bg_white align=center>&nbsp;'||COSTLIST.COST_DGR||'차</td>';
      V_BODY1 := V_BODY1 || '<td class=table_bg_white align=center>&nbsp;'||V_YMD||'</td>';
      V_BODY1 := V_BODY1 || '<td class=table_bg_white align=right>&nbsp;'||COSTLIST.COST_AMT||'원</td>';   
      V_BODY1 := V_BODY1 || '</tr> ';
         
      END LOOP;
        
     V_BODY := V_BODY || V_BODY1;
     V_BODY := V_BODY || '</table>';
     V_BODY := V_BODY || '</td>';
     V_BODY := V_BODY || '</tr>';
     V_BODY := V_BODY || '</table>';
     V_BODY := V_BODY || '</body>';
     V_BODY := V_BODY || '</html>'; 
     
     -- 메일 ID 채번
     SELECT MAX(MID) + 1
      INTO V_MID 
      FROM TS_MAILQUEUE;   
     
     -- 메일 수신자 정보 등록
     INSERT INTO TS_RECIPIENTINFO
           (MID
         , SUBID
         , TID
         , RID
         , RNAME
         , RMAIL
         , TRANSFER_FLAG)
       SELECT V_MID
          , 0
         , 10
          , A.EMP_NO
          , A.KO_NM
         , A.EMAIL
         , 'N' 
        FROM TB_MAN_EMP A
          , (SELECT CHGR_EMP_NO EMP_NO
          FROM TB_MST_ORG_CHGR
          WHERE ORG_CD  = V_ORG_CD
           AND COMM_CD IN ('14')
          UNION
         SELECT PL_EMP_NO EMP_NO
          FROM TB_PJT_MST
          WHERE PJT_CD = V_PJT_CD) B
        WHERE A.EMP_NO = B.EMP_NO;   

     -- 메일 내용 등록
     INSERT INTO TS_MAILQUEUE
     (MID, SUBID, TID, SPOS, SNAME, SMAIL, SID, RPOS, 
      QUERY, CTNPOS, SUBJECT, CONTENTS, CDATE, SDATE, STATUS, DBCODE, 
      REFMID, CHARSET, TRANSFER_FLAG, MAIL_TYPE)
     VALUES
     (V_MID, 0, 10, 0, 'TESTER', 'TESTER@lge.com', '00000', 0, NULL, 0, 
      V_TITLE, V_BODY, SYSDATE, SYSDATE+(2/24), '0', NULL, 0, 0, 'N', '01');  
    
    END IF;
      
   END LOOP;    
   
   COMMIT;

  EXCEPTION
   WHEN E_APP_ERR THEN  
    ROLLBACK;
   WHEN OTHERS THEN
    V_MSG := RPAD('SP_OSC_COST_MAIL',20,' ') || '[실패]';
    ROLLBACK;  
  END SP_OSC_COST_MAIL;
  /

