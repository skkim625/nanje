[Analytic Function]

1.Ranking family :순위나 등급
RANK(), DENSE_RANK(), CUME_DIST(), PERCENT_RANK(), NTILE(), ROW_NUMBER()

2.Window aggregate family : 집계정보
SUM, AVG, MIN, MAX, STDDEV, VARIANCE, COUNT, FIRST_VALUE, LAST_VALUE

3.Reporting Aggregate family : 비교
SUM, AVG ,MAX, MIN, COUNT,STDDEV , VARIANCE

4. LEAD/LAG family : 서로 다른 두 로우값을 비교
LEAD()와 LAG() 

[ROW_NUMBER() 사용예]
1. 아래 그림의 월별 급여 집계테이블에서 2001년 1월의 각 부서별 급여액순으로 상위 2위에 해당 하는 사원 1명의 이름, 급여액을 구하는 SQL을 작성하시오. 단, 급여액이 동일할 경우 성명 순으로 한다.( 즉, 동률의 급여금액이 존재하도라도 부서별 급여금액 역순, 이름순으로 정렬하여 그 순서에 따른 2위(두번째) 를 의미) (ROW_NUMBER활용사례 2)

[월별 급여집계 테이블]
부서        성 명        년월        급여액
총무부        홍길동        200101        200
총무부        임꺽정        200101        250
총무부        장길산        200101        100
총무부        최고봉        200101        200
총무부        황비홍        200101        120
영업부        궁해        200101        300
영업부        왕곤        200101        310
영업부        견온        200101        220
생산부        박임자        200101        350
생산부        전본인        200101        300
생산부        노친구        200101        300
생산부        김갱제        200101        230

[결과 집합]
부  서        성명        급여액
총무부        최고봉        200
영업부         궁해        300
생산부        노친구        300

SQL) SELECT 부서, 성명, 급여액
      FROM  (SELECT 부서, 성명, 급여액,
                    ROW_NUMBER() OVER (PARTITION BY 부서 
                    ORDER BY 급여액 DESC, 성명) SEQ
             FROM   월별급여테이블
             WHERE  년월 = '200101' ) 
      WHERE  SEQ = 2; 

2. 아래 테이블의 데이터를 참조하여 결과집합을 구하는 SQL을 작성하시오. CO001T는 코드 테이블로 하나의 MAJOR 코드에 대하여 최대 3개의 MINOR 코드를 가질 수 있다.우리는 보고자 하는 것은 각 MAJOR 코드에 대하여 MINOR 코드 를 가로로 정렬하여 보고자 한다. 이때 MINOR 코드가 3개가 아닌 경우에 나머지는 공백으로 둔다. (RANK 활용사례 1)

[코드 테이블인 CO001T의 데이터 구조 ]
Major        Minor
영업        가마니
영업        나오미
영업        마동탁
물류        사시미
물류        아사달
회계        자몽돌
회계        차이나
회계        카이로
전산        파김치

∴ 결과 집합 
MAJOR        MINOR1        MINOR2        MINOR3
물류        사시미        아사달         
영업        가마니        나오미        마동탁
전산        파김치                  
회계        자몽돌        차이나        카이로

SQL) SELECT t1.major,
            max(decode(no, 1, minor)) minor1, 
            max(decode(no, 2, minor)) minor2, 
            max(decode(no, 3, minor)) minor3 
     FROM ( 
            SELECT major,minor,
                   RANK() OVER (PARTITION BY major ORDER BY minor ) as no
              FROM co001t
             GROUP BY major,minor
          ) t1
     GROUP BY t1.major
 
